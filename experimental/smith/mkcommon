#!/usr/bin/env python3
#
# Given two sets of labelled training data, remove all data points
# for which there is not a corresponding <benchmark,dataset> pair in both.
#

from argparse import ArgumentParser

import smith


def intersect(a, b):
  return list(set(a) & set(b))


def write_common(data, common, header, file):
  print(",".join(header), file=file)
  for line in data:
    if (line[0], line[1]) in common:
      print(",".join(line), file=file)


def main():
  parser = ArgumentParser()
  parser.add_argument('input1', help='path to 1st training CSV')
  parser.add_argument("input2", help='path to 2nd training CSV')
  args = parser.parse_args()

  left = smith.read_csv(smith.assert_exists(args.input1), asdict=False)
  right = smith.read_csv(smith.assert_exists(args.input2), asdict=False)

  # Check headers
  assert (left[0] == right[0])
  assert (left[0][0].strip() == "benchmark")
  assert (left[0][1].strip() == "dataset")

  assert (right[0][0].strip() == "benchmark")
  assert (right[0][1].strip() == "dataset")
  header = left[0]

  # Strip header
  left = sorted(left[1:])
  right = sorted(right[1:])

  leftb = [(l[0], l[1]) for l in left]
  rightb = [(r[0], r[1]) for r in right]

  common = intersect(leftb, rightb)

  print("size of common data:", len(common))
  print("size of input1:", len(leftb),
        "({:.1f} %)".format((len(common) / len(leftb)) * 100))
  print("size of input2:", len(rightb),
        "({:.1f} %)".format((len(common) / len(rightb)) * 100))

  with open(args.input1, "w") as outfile:
    write_common(left, common, header, outfile)

  with open(args.input2, "w") as outfile:
    write_common(right, common, header, outfile)


if __name__ == '__main__':
  main()
