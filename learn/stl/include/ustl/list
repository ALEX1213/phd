// -*-c++-*-
//
#ifndef LEARN_STL_INCLUDE_USTL_LIST_H
#define LEARN_STL_INCLUDE_USTL_LIST_H

#include <ustl/algorithm>
#include <ustl/vector>

#include <iterator>
#include <memory>

namespace ustl {


// list
//
// Lists are sequence containers that allow constant time insert and
// erase operations anywhere within the sequence, and iteration in
// both directions.
//
// List containers are implemented as doubly-linked lists; Doubly
// linked lists can store each of the elements they contain in
// different and unrelated storage locations. The ordering is kept
// internally by the association to each element of a link to the
// element preceding it and a link to the element following it.

// The//y are very similar to forward_list: The main difference being
// that forward_list objects are single-linked lists, and thus they
// can only be iterated forwards, in exchange for being somewhat
// smaller and more efficient.
//
// Compared to other base standard sequence containers (array, vector
// and deque), lists perform generally better in inserting, extracting
// and moving elements in any position within the container for which
// an iterator has already been obtained, and therefore also in
// algorithms that make intensive use of these, like sorting
// algorithms.
//
// The main drawback of lists and forward_lists compared to these
// other sequence containers is that they lack direct access to the
// elements by their position; For example, to access the sixth
// element in a list, one has to iterate from a known position (like
// the beginning or the end) to that position, which takes linear time
// in the distance between these. They also consume some extra memory
// to keep the linking information associated to each element (which
// may be an important factor for large lists of small-sized
// elements).
//
template<typename T, typename Alloc = std::allocator<T> >
class list {
 private:
  // Forward declarations of nested class:
  class __node;

  using node_type = __node;

 public:
  // Forward declarations of nested class:
  template<typename PointerT>
  class __iterator;

  ///////////////////
  // Member types: //
  ///////////////////
  using value_type = T;

  using allocator_type = Alloc;

  using reference = value_type&;

  using const_reference = const value_type&;

  using pointer = typename std::allocator_traits<allocator_type>::pointer;

  using const_pointer =
      typename std::allocator_traits<allocator_type>::const_pointer;

  using iterator = __iterator<value_type>;

  using const_iterator = __iterator<const value_type>;

  // TODO: set difference type.
  using difference_type = size_t;
  // typename std::iterator_traits<iterator>::difference_type;

  using size_type = size_t;


  ///////////////////
  // Constructors: //
  ///////////////////
  //
  // Constructs a list container object, initializing its contents
  // depending on the constructor version used.
  //
  // The container keeps an internal copy of alloc, which is used to
  // allocate and deallocate storage for its elements, and to
  // construct and destroy them (as specified by its
  // allocator_traits). If no alloc argument is passed to the
  // constructor, a default-constructed allocator is used, except in
  // the following cases:
  //
  // - The copy constructor (4, first signature) creates a container
  //   that keeps and uses a copy of the allocator returned by calling
  //   the appropriate selected_on_container_copy_construction trait
  //   on x's allocator.
  //
  // - The move constructor (5, first signature) acquires x's
  //   allocator.
  //
  // All elements are copied, moved or otherwise constructed by
  // calling allocator_traits::construct with the appropriate
  // arguments.
  //

  // default:
  //
  // Constructs an empty container, with no elements.
  //
  list()
      : _alloc(allocator_type()),
        _tail(new node_type()),
        _head(new node_type()) {
    _tail->prev(_head);
    _head->next(_tail);
  }

  explicit list(const allocator_type& alloc)
      : _alloc(allocator_type()),
        _tail(new node_type()),
        _head(new node_type()) {
    _tail->prev(_head);
    _head->next(_tail);
  }


  //
  // fill:
  //
  // Constructs a container with n elements. Each element is a copy of
  // val (if provided).
  //
  explicit list(size_type n,
                        const allocator_type& alloc = allocator_type())
      : list(alloc) {
    while (n--)
      emplace_front();
  }

  explicit list(size_type n, const value_type& val,
                        const allocator_type& alloc = allocator_type())
      : list(alloc) {
    while (n--)
      insert(begin(), val);
  }


  //
  // range:
  //
  // Constructs a container with as many elements as the range
  // [first,last), with each element emplace-constructed from its
  // corresponding element in that range, in the same order.
  //
  template<typename InputIterator>
  list(InputIterator first, InputIterator last,
               const allocator_type& alloc = allocator_type())
      : list(alloc) {
    insert(begin(), first, last);
  }


  //
  // copy:
  //
  // Constructs a container with a copy of each of the elements in
  // fwdlst, in the same order.
  //
  list(const list& fwdlst)
      : list() {
    insert(begin(), fwdlst.begin(), fwdlst.end());
  }

  list(const list& fwdlst, const allocator_type& alloc)
      : list(alloc) {
    insert(begin(), fwdlst.begin(), fwdlst.end());
  }


  //
  // move:
  //
  // Constructs a container that acquires the elements of fwdlst.  If
  // alloc is specified and is different from fwdlst's allocator, the
  // elements are moved. Otherwise, no elements are constructed (their
  // ownership is directly transferred).  fwdlst is left in an
  // unspecified but valid state.
  //
  list(list&& fwdlst) {
    _head = fwdlst._head;
    _tail = fwdlst._tail;
    _alloc = fwdlst._alloc;
  }

  list(list&& fwdlst, const allocator_type& alloc) {
    // TODO: implement
  }

  //
  // initializer list:
  //
  // Constructs a container with a copy of each of the elements in il,
  // in the same order.
  //
  list(std::initializer_list<value_type> il,
               const allocator_type& alloc = allocator_type())
      : list(alloc) {
    insert(begin(), il);
  }


  /////////////////
  // Destructor: //
  /////////////////
  //
  // This calls allocator_traits::destroy on each of the contained
  // elements, and deallocates all the storage capacity allocated by
  // the list container using its allocator.
  //

  ~list() {
    auto it = begin();
    while (it != end())
      delete it++.node();
  }


  /////////////////
  // Assignment: //
  /////////////////
  //
  // Assigns new contents to the container, replacing its current
  // contents.
  //

  //
  // copy:
  //
  // Copies all the elements from list into the container (with
  // list preserving its contents).
  //
  list& operator=(const list& list) {
    clear();
    insert(begin(), list.begin(), list.end());
    return *this;
  }


  //
  // move:
  //
  // Moves the elements of list into the container (x is left in an
  // unspecified but valid state).
  //
  list& operator=(list&& list) {
    clear();
    delete _head;
    delete _tail;
    _head = list._head;
    _tail = list._tail;
    _alloc = list._alloc;
    return *this;
  }

  //
  // initializer_list:
  //
  // Copies the elements of il into the container.
  //
  list& operator=(std::initializer_list<value_type> il) {
    clear();
    insert(begin(), il);

    return *this;
  }


  ////////////////
  // Iterators: //
  ////////////////
  //

  //
  // before_begin():
  //
  // Returns an iterator pointing to the position before the first
  // element in the container.
  //
  // The iterator returned shall not be dereferenced: It is meant to
  // be used as an argument for member functions emplace_after,
  // insert_after, erase_after or splice_after, to specify the
  // beginning of the sequence as the location where the action is
  // performed.
  //
  iterator before_begin() noexcept {
    return iterator(_head);
  }

  const_iterator before_begin() const noexcept {
    return const_iterator(_head);
  }


  //
  // begin():
  //
  // Returns an iterator pointing to the first element in the
  // list container.
  //
  // Notice that, unlike member list::front, which returns a
  // reference to the first element, this function returns a forward
  // iterator pointing to it.
  //
  // If the container is empty, the returned iterator value shall not
  // be dereferenced.
  //
  iterator begin() noexcept {
    return iterator(_head->next());
  }

  const_iterator begin() const noexcept {
    return const_iterator(_head->next());
  }


  //
  // end():
  //
  // Returns an iterator referring to the past-the-end element in the
  // list container.
  //
  // The past-the-end element is the theoretical element that would
  // follow the last element in the list. It does not point to
  // any element, and thus shall not be dereferenced.
  //
  // Because the ranges used by functions of the standard library do
  // not include the element pointed by their closing iterator, this
  // function is often used in combination with list::begin to
  // specify a range including all the elements in the container.
  //
  // If the container is empty, this function returns the same as
  // list::begin.
  //
  iterator end() noexcept {
    return iterator(_tail);
  }

  const_iterator end() const noexcept {
    return const_iterator(_tail);
  }


  //
  // cbefore_begin():
  //
  // Returns a const_iterator pointing to the position before the
  // first element in the container.
  //
  // A const_iterator is an iterator that points to const
  // content. This iterator can be increased and decreased (unless it
  // is itself also const), just like the iterator returned by
  // list::before_begin, but it cannot be used to modify the
  // contents it points to.
  //
  // The value returned shall not be dereferenced.
  //
  const_iterator cbefore_begin() const noexcept {
    return const_iterator(_head);
  }


  //
  // cbegin():
  //
  // Returns a const_iterator pointing to the first element in the
  // container.
  //
  // A const_iterator is an iterator that points to const
  // content. This iterator can be increased and decreased (unless it
  // is itself also const), just like the iterator returned by
  // list::begin, but it cannot be used to modify the contents
  // it points to, even if the list object is not itself
  // const.
  //
  // If the container is empty, the returned iterator value shall not
  // be dereferenced.
  //
  const_iterator cbegin() const noexcept {
    return const_iterator(_head->next());
  }


  //
  // cend():
  //
  // Returns a const_iterator pointing to the past-the-end element in
  // the list container.
  //
  // A const_iterator is an iterator that points to const
  // content. This iterator can be increased and decreased (unless it
  // is itself also const), just like the iterator returned by
  // list::end, but it cannot be used to modify the contents
  // it points to, even if the list object is not itself
  // const.
  //
  // The value returned shall not be dereferenced.
  //
  const_iterator cend() const noexcept {
    return const_iterator(_tail);
  }


  ///////////////
  // Capacity: //
  ///////////////


  //
  // empty():
  //
  // Returns a bool value indicating whether the list
  // container is empty, i.e. whether its size is 0.
  //
  // This function does not modify the content of the container in any
  // way. To clear the content of an array object, see
  // list::clear.
  //
  bool empty() const noexcept {
    return begin() == end();
  }


  //
  // max_size():
  //
  // Returns the maximum number of elements that the list
  // container can hold.
  //
  // This is the maximum potential number of elements the container
  // can reach due to known system or library implementation
  // limitations, but the container is by no means guaranteed to be
  // able to reach that size: it can still fail to allocate storage at
  // any point before that size is reached.
  //
  size_type max_size() const noexcept {
    return _alloc.max_size();
  }


  /////////////////////
  // Element access: //
  /////////////////////


  //
  // front():
  //
  // Returns a reference to the first element in the list
  // container.
  //
  // Unlike member list::begin, which returns an iterator to
  // this same element, this function returns a direct reference.
  //
  // Calling this function on an empty container causes undefined
  // behavior.
  //
  reference front() {
    return _head->next()->data();
  }

  const_reference front() const {
    return _head->next()->data();
  }


  ////////////////
  // Modifiers: //
  ////////////////


  //
  // assign():
  //
  // Assigns new contents to the list container, replacing its
  // current contents, and modifying its size accordingly.
  //
  // In the range version (1), the new contents are elements
  // constructed from each of the elements in the range between first
  // and last, in the same order.
  //
  // In the fill version (2), the new contents are n elements, each
  // initialized to a copy of val.
  //
  // In the initializer list version (3), the new contents are copies
  // of the values passed as initializer list, in the same order.
  //
  // Any elements held in the container before the call are destroyed
  // and replaced by newly constructed elements (no assignments of
  // elements take place).
  //
  // If there are changes in storage, the internal allocator is used
  // (through its traits). It is also used to destroy all existing
  // elements, and to construct the new ones.
  //
  template<typename InputIterator>
  void assign(InputIterator first, InputIterator last) {
    // TODO:
  }

  void assign(size_type n, const value_type& val) {
    // TODO:
  }

  void assign(std::initializer_list<value_type> il) {
    // TODO:
  }


  //
  // emplace_front():
  //
  // Inserts a new element at the beginning of the list, right
  // before its current first element. This new element is constructed
  // in place using args as the arguments for its construction.
  //
  // This effectively increases the container size by one.
  //
  // A similar member function exists, push_front, which either copies
  // or moves an existing object into the container.
  //
  template<typename... Args>
  void emplace_front(Args&&... args) {
    emplace(begin(), args...);
  }


  //
  // push_front():
  //
  // Inserts a new element at the beginning of the list, right
  // before its current first element. The content of val is copied
  // (or moved) to the inserted element.
  //
  // This effectively increases the container size by one.
  //
  // A similar member function exists, emplace_front, which constructs
  // the inserted element object directly in place, without performing
  // any copy or move operation.
  //
  void push_front(const value_type& val) {
    insert(begin(), val);
  }

  void push_front(value_type&& val) {
    insert(begin(), val);
  }


  //
  // pop_front():
  //
  // Removes the first element in the list container,
  // effectively reducing its size by one.
  //
  void pop_front() {
    erase(begin());
  }


  //
  // emplace():
  //
  // The container is extended by inserting a new element at
  // position. This new element is constructed in place using args as
  // the arguments for its construction.
  //
  // This effectively increases the container size by one.
  //
  // Unlike other standard sequence containers, list and forward_list
  // objects are specifically designed to be efficient inserting and
  // removing elements in any position, even in the middle of the
  // sequence.
  //
  // The element is constructed in-place by calling
  // allocator_traits::construct with args forwarded.
  //
  // A similar member function exists, insert, which either copies or
  // moves existing objects into the container.
  //
  template<typename... Args>
  iterator emplace(const_iterator position, Args&&... args) {
    return insert(position, value_type(args...));
  }


  //
  // insert():
  //
  // The container is extended by inserting new elements before the
  // element at the specified position.
  //
  // This effectively increases the list size by the amount of
  // elements inserted.
  //
  // Unlike other standard sequence containers, list and forward_list
  // objects are specifically designed to be efficient inserting and
  // removing elements in any position, even in the middle of the
  // sequence.
  //
  // The arguments determine how many elements are inserted and to
  // which values they are initialized.
  //
  iterator insert(const_iterator position, const value_type& val) {
    node_type* prev = position.node()->prev();
    node_type* next = position.node();
    node_type* curr = new node_type(val, prev, next);

    prev->next(curr);
    next->prev(curr);

    return iterator(curr);
  }

  iterator insert(const_iterator position, value_type&& val) {
    node_type* prev = position.node()->prev();
    node_type* next = position.node();
    node_type* curr = new node_type(std::move(val), prev, next);

    prev->next(curr);
    next->prev(curr);

    return iterator(curr);
  }

  iterator insert(const_iterator position, size_type n, const value_type& val) {
    auto ret = position;
    while (n--) {
      auto curr = insert(position, val);
      if (ret == position)
        ret = curr;
    }
    return iterator(ret.node());
  }

  template<typename InputIterator>
  iterator insert(const_iterator position,
                  InputIterator first, InputIterator last) {
    auto ret = position;
    while (first != last) {
      auto curr = insert(position, *first++);
      if (ret == position)
        ret = curr;
    }
    return iterator(ret.node());
  }

  iterator insert(const_iterator position,
                  std::initializer_list<value_type> il) {
    auto first = il.begin();
    auto ret = position;

    while (first != il.end()) {
      auto curr = insert(position, *first++);
      if (ret == position)
        ret = curr;
    }

    return iterator(ret.node());
  }


  //
  // erase():
  //
  // Removes from the list container either a single element
  // (position) or a range of elements ([first,last)).
  //
  // This effectively reduces the container size by the number of
  // elements removed, which are destroyed.
  //
  // Unlike other standard sequence containers, list and forward_list
  // objects are specifically designed to be efficient inserting and
  // removing elements in any position, even in the middle of the
  // sequence.
  //
  iterator erase(const_iterator position) {
    auto curr = position.node();
    auto prev = curr->prev();
    auto next = curr->next();

    prev->next(next);
    next->prev(prev);
    delete curr;

    return iterator(next);
  }

  iterator erase(const_iterator first, const_iterator last) {
    auto prev = first.node->prev();
    auto next = last.node;

    while (first != last) {
      auto node = first.node();
      ++first;
      delete node;
    }

    prev->next(next);
    next->prev(prev);
  }


  //
  // swap():
  //
  // Exchanges the content of the container by the content of fwdlst,
  // which is another list object of the same type. Sizes may
  // differ.
  //
  // After the call to this member function, the elements in this
  // container are those which were in fwdlst before the call, and the
  // elements of fwdlst are those which were in this. All iterators,
  // references and pointers remain valid for the swapped objects.
  //
  // Notice that a non-member function exists with the same name,
  // swap, overloading that algorithm with an optimization that
  // behaves like this member function.
  //
  // Whether the container allocators are also swapped is not defined,
  // unless in the case the appropriate allocator trait indicates
  // explicitly that they shall propagate.
  //
  void swap(list& fwdlst) {
    auto head = _head;
    auto tail = _tail;
    auto alloc = _alloc;

    _head = fwdlst._head;
    _tail = fwdlst._tail;
    _alloc = fwdlst._alloc;

    fwdlst._head = head;
    fwdlst._tail = tail;
    fwdlst._alloc = alloc;
  }


  //
  // resize():
  //
  // Resizes the container to contain n elements.
  //
  // If n is smaller than the current number of elements in the
  // container, the content is trimmed to contain only its first n
  // elements, removing those beyonf (and destroying them).
  //
  // If n is greater than the current number of elements in the
  // container, the content is expanded by inserting at the end as
  // many elements as needed to reach a size of n elements. If val is
  // specified, the new elements are initialized as copies of val,
  // otherwise, they are value-initialized.
  //
  // Notice that this function changes the actual content of the
  // container by inserting or erasing elements from it.
  //
  void resize(size_type n) {
    // TODO: implement
  }

  void resize(size_type n, const value_type& val) {
    // TODO: implement
  }


  //
  // clear():
  //
  // Removes all elements from the list container (which are
  // destroyed), and leaving the container with a size of 0.
  //
  void clear() noexcept {
    node_type* curr = _head->next();

    while (curr != _tail) {
      node_type* tmp = curr->next();
      delete curr;
      curr = tmp;
    }

    _head->next(_tail);
    _tail->prev(_head);
  }


  //
  // Not in spec: print to output stream.
  //
  friend std::ostream& operator<<(std::ostream &out, const list &list) {
    for (auto& v : list)
      out << v << ' ';

    return out;
  }


  /////////////////
  // Operations: //
  /////////////////


  //
  // splice_after():
  //
  // Transfers elements from fwdlst into the container inserting them
  // after the element pointed by position.
  //
  // This effectively inserts those elements into the container and
  // removes them from fwdlst, altering the sizes of both
  // containers. The operation does not involve the construction or
  // destruction of any element. They are transferred, no matter
  // whether fwdlst is an lvalue or an rvalue, or whether the
  // value_type supports move-construction or not.
  //

  //
  // Transfer all the elements of fwdlst into the container:
  //
  void splice_after(const_iterator position, list& fwdlst) {
    // TODO: implement
  }

  void splice_after(const_iterator position, list&& fwdlst) {
    // TODO: implement
  }

  //
  // Transfer only the element pointed by i from fwdlst into the
  // container:
  //
  void splice_after(const_iterator position, list& fwdlst,
                    const_iterator i) {
    // TODO: implement
  }

  void splice_after(const_iterator position, list&& fwdlst,
                    const_iterator i) {
    // TODO: implement
  }

  //
  // Transfer the range (first,last) from fwdlst into the container:
  //
  void splice_after(const_iterator position, list& fwdlst,
                    const_iterator first, const_iterator last) {
    // TODO: implement
  }

  void splice_after(const_iterator position, list&& fwdlst,
                    const_iterator first, const_iterator last) {
    // TODO: implement
  }


  //
  // remove():
  //
  // Removes from the container all the elements that compare equal to
  // val. This calls the destructor of these objects and reduces the
  // container size by the number of elements removed.
  //
  // Unlike member function list::erase_after, which erases
  // elements by their position (using an iterator), this function
  // (list::remove) removes elements by their value.
  //
  // A similar function, list::remove_if, exists, which allows
  // for a condition other than an equality comparison to determine
  // whether an element is removed.
  //
  void remove(const value_type& val) {
    remove_if([val](const value_type &x) { return x == val; });
  }


  //
  // remove_if():
  //
  // Removes from the container all the elements for which Predicate
  // pred returns true. This calls the destructor of these objects and
  // reduces the container size by the number of elements removed.
  //
  // The function calls pred(*i) for each element (where i is an
  // iterator to that element). Any of the elements in the list for
  // which this returns true, are removed from the container.
  //
  template<typename Predicate>
  void remove_if(Predicate pred) {
    node_type* curr = _head->next();

    while (curr != _tail) {
      node_type* next = curr->next();
      if (pred(curr->data()))
        erase(iterator(curr));
      curr = next;
    }
  }


  //
  // unique():
  //
  // The version with no parameters removes all but the first element
  // from every consecutive group of equal elements in the container.
  //
  // Notice that an element is only removed from the list
  // container if it compares equal to the element immediately
  // preceding it. Thus, this function is especially useful for sorted
  // lists.
  //
  // The second version takes as argument a specific comparison
  // function that determine the "uniqueness" of an element. In fact,
  // any behavior can be implemented (and not only an equality
  // comparison), but notice that the function will call
  // binary_pred(*i,*(i-1)) for all pairs of elements (where i is an
  // iterator to an element, starting from the second) and remove i
  // from the list if the predicate returns true.
  //
  // The elements removed are destroyed.
  //
  void unique() {
    unique([](const value_type &x, const value_type &y) { return x == y; });
  }

  template<typename BinaryPredicate>
  void unique(BinaryPredicate binary_pred) {
    node_type *prev = _head->next(), * curr = prev->next();

    while (curr != _tail) {
      node_type* next = curr->next();

      if (binary_pred(curr->data(), prev->data()))
        erase(iterator(curr));
      else
        prev = curr;

      curr = next;
    }
  }


  //
  // merge():
  //
  // Merges x into the list by transferring all of its
  // elements at their respective ordered positions into the container
  // (both containers shall already be ordered).
  //
  // This effectively removes all the elements in x (which becomes
  // empty), and inserts them into their ordered position within
  // container (which expands in size by the number of elements
  // transferred). The operation is performed without constructing nor
  // destroying any element: they are transferred, no matter whether x
  // is an lvalue or an rvalue, or whether the value_type supports
  // move-construction or not.
  //
  // The template versions with two parameters (2), have the same
  // behavior, but take a specific predicate (comp) to perform the
  // comparison operation between elements. This comparison shall
  // produce a strict weak ordering of the elements (i.e., a
  // consistent transitive comparison, without considering its
  // reflexiveness).
  //
  // This function requires that the list containers have
  // their elements already ordered by value (or by comp) before the
  // call. For an alternative on unordered lists, see list::splice.
  //
  // Assuming such ordering, each element of x is inserted at the
  // position that corresponds to its value according to the strict
  // weak ordering defined by operator< or comp. The resulting order
  // of equivalent elements is stable (i.e., equivalent elements
  // preserve the relative order they had before the call, and
  // existing elements precede those equivalent inserted from x).
  //
  void merge(list& fwdlst) {
    // TODO: implement
  }

  void merge(list&& fwdlst) {
    // TODO: implement
  }

  template<typename Compare>
  void merge(list& fwdlst, Compare comp) {
    // TODO: implement
  }

  template<typename Compare>
  void merge(list&& fwdlst, Compare comp) {
    // TODO: implement
  }


  //
  // sort():
  //
  // Sorts the elements in the list, altering their position
  // within the container.
  //
  // The sorting is performed by applying an algorithm that uses
  // either operator< (in version (1)) or comp (in version (2)) to
  // compare elements. This comparison shall produce a strict weak
  // ordering of the elements (i.e., a consistent transitive
  // comparison, without considering its reflexiveness).
  //
  // The resulting order of equivalent elements is stable: i.e.,
  // equivalent elements preserve the relative order they had before
  // the call.
  //
  // The entire operation does not involve the construction,
  // destruction or copy of any element object. Elements are moved
  // within the container.
  //
  void sort() {
    sort([](const_reference a, const_reference b){ return a < b; });
  }

  template<typename Compare>
  void sort(Compare comp) {
    //
    // Sorting this way requires n * sizeof(pointer) memory, in
    // addition to any overhead of std::sort().
    //

    // Create a vector of node pointers.
    ustl::vector<node_type*> idxs;  // NOLINT(build/include_what_you_use)
    node_type *node = _head->next();
    while (node != _tail) {
      idxs.push_back(node);
      node = node->next();
    }

    // Sort node pointers by node data.
    ustl::sort(idxs.begin(), idxs.end(),
               [comp](node_type* a, node_type* b) {
                 return comp(a->data(), b->data());
               });

    // Update list order based on sorted vector.
    for (size_t i = 1; i < idxs.size(); ++i) {
      idxs[i]->prev(idxs[i-1]);
      idxs[i-1]->next(idxs[i]);
    }

    _head->next(idxs[0]);
    idxs[0]->prev(_head);

    idxs[idxs.size() - 1]->next(_tail);
    _tail->prev(idxs[idxs.size() - 1]);
  }


  //
  // reverse():
  //
  // Reverses the order of the elements in the list container.
  //
  void reverse() noexcept {
    node_type* curr = _head->next(), * prev = _head, *tmp;

    while (curr) {
      tmp = curr->next();

      // std::swap(curr->next(), prev->prev());
      curr->next(prev);
      prev->prev(curr);

      prev = curr;
      curr = tmp;
    }

    tmp = _tail;
    _tail = _head;
    _head = tmp;
    // std::swap(_head, _tail);
  }


  ////////////////
  // Observers: //
  ////////////////


  //
  // get_allocator():
  //
  // Returns a copy of the allocator object associated with the
  // container.
  //
  allocator_type get_allocator() const noexcept {
    return _alloc;
  }


  /////////////////////
  // Nested Classes: //
  /////////////////////

  template<typename PointerT>
  class __iterator : std::iterator<std::bidirectional_iterator_tag,
                                   value_type> {
   public:
    using pointer_type = PointerT;

    using deref_type = pointer_type&;

    explicit __iterator(node_type* node) : _node(node) {}

    // construct from const iterator
    template<typename U>
    __iterator(const __iterator<U>& x,
               typename std::enable_if<!std::is_const<U>()>::type* = nullptr)
        : _node(const_cast<node_type*>(x.node())) {}

    // copy construct:
    __iterator(const __iterator &x)
        : _node(x._node) {}

    // move construct:
    __iterator(__iterator &&x)
        : _node(std::move(x._node)) {}

    // copy assignment:
    __iterator& operator=(
        const __iterator &x) {
      _node = x._node;
      return *this;
    }

    // move assignment:
    __iterator& operator=(
        __iterator &&x) {
      _node = x._node;
      return *this;
    }

    // prefix increment
    __iterator operator++() {
      _node = _node->next();
      return *this;
    }

    // postfix increment
    __iterator operator++(int) {
      auto curr = _node;
      _node = _node->next();
      return __iterator(curr);
    }

    // prefix decrement
    __iterator operator--() {
      _node = _node->prev();
      return *this;
    }

    // postfix decrement
    __iterator operator--(int) {
      auto curr = _node;
      _node = _node->prev();
      return __iterator(curr);
    }

    // dereference
    deref_type operator*() const {
      return _node->data();
    }

    // relational ops:
    friend bool operator==(const __iterator& lhs,
                           const __iterator& rhs) {
      return lhs._node == rhs._node;
    }

    friend bool operator!=(const __iterator& lhs,
                           const __iterator& rhs) {
      return !(lhs == rhs);
    }

    // Let outer class access private members:
    friend class list;

   private:
    node_type* node() { return _node; }

    const node_type* node() const { return _node; }

    node_type* _node;
  };  // class __iterator

 private:
  //////////////
  // Private: //
  //////////////

  class __node {
   public:
    explicit __node(__node* prev = nullptr, __node* next = nullptr)
        : _data(), _prev(prev), _next(next) {}

    explicit __node(const value_type& data,
                    __node* prev = nullptr,
                    __node* next = nullptr)
        : _data(data), _prev(prev), _next(next) {}

    explicit __node(const value_type&& data,
                    __node* prev = nullptr,
                    __node* next = nullptr)
        : _data(std::move(data)), _prev(prev), _next(next) {}

    reference data() {
      return _data;
    }

    node_type* prev() {
      return _prev;
    }

    node_type* prev(node_type* newprev) {
      return _prev = newprev;
    }

    node_type* next() {
      return _next;
    }

    node_type* next(node_type* newnext) {
      return _next = newnext;
    }

   private:
    value_type _data;
    node_type* _prev;
    node_type* _next;
  };  // class __node

  allocator_type _alloc;
  node_type* _tail;
  node_type* _head;
};


////////////////////////////////////
// Non-member function overloads: //
////////////////////////////////////


//
// Relational operators:
//
// Performs the appropriate comparison operation between the
// list containers lhs and rhs.
//
// The equality comparison (operator==) is performed by comparing the
// elements sequentially using operator==, stopping at the first
// mismatch (as if using algorithm equal).
//
// The less-than comparison (operator<) behaves as if using algorithm
// lexicographical_compare, which compares the elements sequentially
// using operator< in a reciprocal manner (i.e., checking both a<b and
// b<a) and stopping at the first occurrence.
//
template<typename T, typename Alloc>
bool operator==(const list<T, Alloc>& lhs, const list<T, Alloc>& rhs) {
  auto lit = lhs.begin();
  auto rit = rhs.begin();

  while (lit != lhs.end() && rit != rhs.end())
    if (*lit++ != *rit++)
      return false;

  return lit == lhs.end() && rit == rhs.end();
}

template<typename T, typename Alloc>
bool operator!=(const list<T, Alloc>& lhs, const list<T, Alloc>& rhs) {
  return !(lhs == rhs);
}

template<typename T, typename Alloc>
bool operator<(const list<T, Alloc>& lhs, const list<T, Alloc>& rhs) {
  auto lit = lhs.begin();
  auto rit = rhs.begin();

  while (lit != lhs.end() && rit != rhs.end()) {
    if (*lit > *rit)
      return false;
    else if (*lit < *rit)
      return true;
    ++lit;
    ++rit;
  }

  return lit == lhs.end() && rit != rhs.end();
}

template<typename T, typename Alloc>
bool operator<=(const list<T, Alloc>& lhs, const list<T, Alloc>& rhs) {
  return !(lhs > rhs);
}

template<typename T, typename Alloc>
bool operator>(const list<T, Alloc>& lhs, const list<T, Alloc>& rhs) {
  return rhs < lhs;
}

template<typename T, typename Alloc>
bool operator>=(const list<T, Alloc>& lhs, const list<T, Alloc>& rhs) {
  return !(lhs < rhs);
}



//
// swap():
//
// The contents of container x are exchanged with those of y. Both
// container objects must be of the same type (same template
// parameters), although sizes may differ.
//
// After the call to this member function, the elements in x are those
// which were in y before the call, and the elements of y are those
// which were in x. All iterators, references and pointers remain
// valid for the swapped objects.
//
// This is an overload of the generic algorithm swap that improves its
// performance by mutually transferring ownership over their assets to
// the other container (i.e., the containers exchange references to
// their data, without actually performing any element copy or
// movement): It behaves as if x.swap(y) was called.
//
template<typename T, typename Alloc>
void swap(list<T, Alloc>& x, list<T, Alloc>& y) {  // NOLINT
  x.swap(y);  // NOLINT(build/include_what_you_use)
}


}  // namespace ustl

#endif  // LEARN_STL_INCLUDE_USTL_LIST_H
